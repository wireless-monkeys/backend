// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: dashboard-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	GetNumberOfPeople(ctx context.Context, in *GetNumberOfPeopleRequest, opts ...grpc.CallOption) (*GetNumberOfPeopleResponse, error)
	SubscribeCamera(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DashboardService_SubscribeCameraClient, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) GetNumberOfPeople(ctx context.Context, in *GetNumberOfPeopleRequest, opts ...grpc.CallOption) (*GetNumberOfPeopleResponse, error) {
	out := new(GetNumberOfPeopleResponse)
	err := c.cc.Invoke(ctx, "/api.DashboardService/GetNumberOfPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) SubscribeCamera(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DashboardService_SubscribeCameraClient, error) {
	stream, err := c.cc.NewStream(ctx, &DashboardService_ServiceDesc.Streams[0], "/api.DashboardService/SubscribeCamera", opts...)
	if err != nil {
		return nil, err
	}
	x := &dashboardServiceSubscribeCameraClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DashboardService_SubscribeCameraClient interface {
	Recv() (*CameraResponse, error)
	grpc.ClientStream
}

type dashboardServiceSubscribeCameraClient struct {
	grpc.ClientStream
}

func (x *dashboardServiceSubscribeCameraClient) Recv() (*CameraResponse, error) {
	m := new(CameraResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility
type DashboardServiceServer interface {
	GetNumberOfPeople(context.Context, *GetNumberOfPeopleRequest) (*GetNumberOfPeopleResponse, error)
	SubscribeCamera(*Empty, DashboardService_SubscribeCameraServer) error
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServiceServer struct {
}

func (UnimplementedDashboardServiceServer) GetNumberOfPeople(context.Context, *GetNumberOfPeopleRequest) (*GetNumberOfPeopleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfPeople not implemented")
}
func (UnimplementedDashboardServiceServer) SubscribeCamera(*Empty, DashboardService_SubscribeCameraServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCamera not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_GetNumberOfPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumberOfPeopleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetNumberOfPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardService/GetNumberOfPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetNumberOfPeople(ctx, req.(*GetNumberOfPeopleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_SubscribeCamera_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DashboardServiceServer).SubscribeCamera(m, &dashboardServiceSubscribeCameraServer{stream})
}

type DashboardService_SubscribeCameraServer interface {
	Send(*CameraResponse) error
	grpc.ServerStream
}

type dashboardServiceSubscribeCameraServer struct {
	grpc.ServerStream
}

func (x *dashboardServiceSubscribeCameraServer) Send(m *CameraResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumberOfPeople",
			Handler:    _DashboardService_GetNumberOfPeople_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCamera",
			Handler:       _DashboardService_SubscribeCamera_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dashboard-service.proto",
}
